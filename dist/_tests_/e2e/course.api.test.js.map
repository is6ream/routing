{"version":3,"file":"course.api.test.js","sourceRoot":"","sources":["../../../src/_tests_/e2e/course.api.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from 'supertest';\r\nimport { app, HTTP_STATUSES } from '../../app';\r\nimport { title } from 'process';\r\nimport { CourseCreateInputModel } from '../../models/CreateCoursesModel'\r\nimport { UpdateCourseModel } from '../../models/UpdateCoursesModel';\r\n\r\ndescribe('/courses', () => {\r\n  let createdCourse: any = null\r\n  let createdCourse2: any = null\r\n  beforeAll(async () => {\r\n    await request(app).delete('/__test__/data');\r\n  });\r\n\r\n  it('should return 200 and empty array', async () => {\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, []);\r\n  });\r\n\r\n  it('should return 404 for not existing course', async () => {\r\n    await request(app)\r\n      .get('/courses/4')\r\n      .expect(HTTP_STATUSES.NOT_FOUND_404);\r\n  });\r\n\r\n  it('should not create course with incorrect input data', async () => {\r\n    const data: CourseCreateInputModel = { title: '' }\r\n    await request(app)\r\n      .post('/courses')\r\n      .send(data)\r\n      .expect(HTTP_STATUSES.BAD_REQUEST_400);\r\n\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, []);\r\n  });\r\n  it('should create course with correct input data', async () => {\r\n    const data: CourseCreateInputModel = { title: 'ux' };\r\n    const createResponse = await request(app)\r\n      .post('/courses')\r\n      .send(data)\r\n      .expect(HTTP_STATUSES.CREATED_201),\r\n      createdCourse = createResponse.body;\r\n\r\n    expect(createdCourse).toEqual({\r\n      id: expect.any(Number),\r\n      title: 'ux',\r\n      studentsCount: null\r\n    })\r\n\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, [createdCourse])\r\n  });\r\n\r\n  it('should create one more course', async () => {\r\n    const data: CourseCreateInputModel = { title: 'ui' }\r\n    const createResponse = await request(app)\r\n      .post('/courses')\r\n      .send(data)\r\n      .expect(HTTP_STATUSES.CREATED_201);\r\n\r\n    createdCourse2 = createResponse.body;\r\n\r\n    expect(createdCourse2).toEqual({\r\n      id: expect.any(Number),\r\n      title: data.title,\r\n      studentsCount: null\r\n    });\r\n\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, [createdCourse, createdCourse2])\r\n      .then(response => {\r\n        expect(response.body).toContainEqual(createdCourse);\r\n        expect(response.body).toContainEqual(createdCourse2);\r\n      });\r\n  });\r\n\r\n  it('should update course with correct input data', async () => {\r\n    const data: UpdateCourseModel = { title: 'good new title' }\r\n    await request(app)\r\n      .put('/courses/' + createdCourse.id)\r\n      .send(data)\r\n      .expect(HTTP_STATUSES.OK_200);\r\n\r\n    await request(app)\r\n      .get('/courses/' + createdCourse.id)\r\n      .expect(HTTP_STATUSES.OK_200, {\r\n        ...createdCourse,\r\n        title: 'good new title'\r\n      });\r\n  });\r\n\r\n  it('should not update course with incorrect input data', async () => {\r\n    const data: CourseCreateInputModel = { title: '' }\r\n    await request(app)\r\n      .put(`/courses/${createdCourse.id}`)\r\n      .send(data)\r\n      .expect(HTTP_STATUSES.BAD_REQUEST_400);\r\n\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, [createdCourse, createdCourse2]);\r\n  });\r\n\r\n  it('should not update course that does not exist', async () => {\r\n    await request(app)\r\n      .put('/courses/' + -100)\r\n      .send({ title: 'good title' })\r\n      .expect(HTTP_STATUSES.NOT_FOUND_404);\r\n  });\r\n\r\n  it('should delete both courses', async () => {\r\n    await request(app)\r\n      .delete('/courses/' + createdCourse.id)\r\n      .expect(HTTP_STATUSES.NO_CONTENT_204);\r\n\r\n    await request(app)\r\n      .get('/courses/' + createdCourse.id)\r\n      .expect(HTTP_STATUSES.NOT_FOUND_404);\r\n\r\n    await request(app)\r\n      .delete('/courses/' + createdCourse2.id)\r\n      .expect(HTTP_STATUSES.NO_CONTENT_204);\r\n\r\n    await request(app)\r\n      .get('/courses/' + createdCourse2.id)\r\n      .expect(HTTP_STATUSES.NOT_FOUND_404);\r\n  });\r\n})\r\n\r\n//сделать маппинг\r\n"]}