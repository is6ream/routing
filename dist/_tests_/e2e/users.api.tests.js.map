{"version":3,"file":"users.api.tests.js","sourceRoot":"","sources":["../../../src/_tests_/e2e/users.api.tests.ts"],"names":[],"mappings":"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","sourcesContent":["import request from 'supertest'\r\nimport { app, HTTP_STATUSES } from '../../app'\r\nimport { title } from 'process'\r\n\r\ndescribe('/', () => {\r\n  beforeAll(async () => {\r\n    await request(app).delete('/__test__/data')\r\n  });\r\n\r\n  it('should return 200 and empty array', async () => {\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, [])\r\n  })\r\n\r\n\r\n  it('should return 404 for not existing course', async () => {\r\n    await request(app)\r\n      .get('/courses/4')\r\n      .expect(HTTP_STATUSES.NOT_FOUND_404)\r\n  })\r\n\r\n  it('should not create product with incorrect input data', async () => {\r\n    await request(app)\r\n      .post('/courses')\r\n      .send({ title: '' })\r\n      .expect(HTTP_STATUSES.BAD_REQUEST_400)\r\n\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, [])\r\n  })\r\n\r\n  let createdProduct: any = null;\r\n  it('should create product with correct input data', async () => {\r\n    const createResponse = await request(app)\r\n      .post('/courses')\r\n      .send({ title: 'ux' })\r\n      .expect(HTTP_STATUSES.CREATED_201)\r\n\r\n    createdProduct = createResponse.body\r\n\r\n    expect(createdProduct).toEqual({\r\n      id: expect.any(Number),\r\n      title: 'ux'\r\n    })\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, [createdProduct])\r\n  })\r\n\r\n\r\n  let createdProduct2: any = null;\r\n\r\n  it('create one more course', async () => {\r\n    const createResponse = await request(app)\r\n      .post('/courses')\r\n      .send({ title: 'ui' })\r\n      .expect(HTTP_STATUSES.CREATED_201)\r\n\r\n    createdProduct2 = createResponse.body\r\n\r\n    expect(createdProduct2).toEqual({\r\n      id: expect.any(Number),\r\n      title: 'ui'\r\n    })\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, [createdProduct, createdProduct2])\r\n\r\n    it('should not update product with incorrect input data', async () => {\r\n      await request(app)\r\n        .post('/courses/' + createdProduct.id)\r\n        .send({ title: '' })\r\n        .expect(HTTP_STATUSES.BAD_REQUEST_400)\r\n\r\n      await request(app)\r\n        .get('/courses')\r\n        .expect(HTTP_STATUSES.OK_200, createdProduct)\r\n    })\r\n\r\n\r\n    it('should not update product that not exist', async () => {\r\n      await request(app)\r\n        .post('/courses/' + -100)\r\n        .send({ title: 'good title' })\r\n        .expect(HTTP_STATUSES.NOT_FOUND_404)\r\n\r\n    })\r\n\r\n    it('should update product with correct input data', async () => {\r\n      await request(app)\r\n        .post('/courses/' + createdProduct.id)\r\n        .send({ title: 'good new title' })\r\n        .expect(HTTP_STATUSES.NO_CONTENT_204);\r\n    })\r\n\r\n    await request(app)\r\n      .get('/courses/' + createdProduct.id)\r\n      .expect(HTTP_STATUSES.OK_200, {\r\n        ...createdProduct,\r\n        title: 'good new title'\r\n      })\r\n\r\n    await request(app)\r\n      .get('/courses/' + createdProduct2.id)\r\n      .expect(HTTP_STATUSES.OK_200, createdProduct2)\r\n\r\n  })\r\n\r\n  it('should delete both courses', async () => {\r\n    await request(app)\r\n      .delete('/courses' + createdProduct.id)\r\n      .expect(HTTP_STATUSES.NO_CONTENT_204)\r\n\r\n    await request(app)\r\n      .get('/courses' + createdProduct.id)\r\n      .expect(HTTP_STATUSES.NOT_FOUND_404)\r\n\r\n    await request(app)\r\n      .delete('/courses' + createdProduct2.id)\r\n      .expect(HTTP_STATUSES.NO_CONTENT_204)\r\n\r\n    await request(app)\r\n      .get('/courses' + createdProduct2.id)\r\n      .expect(HTTP_STATUSES.NOT_FOUND_404)\r\n\r\n    await request(app)\r\n      .get('/courses')\r\n      .expect(HTTP_STATUSES.OK_200, [])\r\n  })\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//34\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}