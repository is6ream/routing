{"version":3,"file":"Index.js","sourceRoot":"","sources":["../src/Index.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express';\r\nimport { serialize } from 'v8';\r\nimport bodyParser from \"body-parser\";\r\n\r\n// Создаем приложение express\r\nconst app = express();\r\n\r\nconst port = process.env.PORT || 5000;\r\n\r\nconst products = [{ id: 1, title: 'tomato' }, { id: 2, title: 'orange' }, { id: 3, title: 'apple' }];\r\nconst addresses = [{ id: 1, value: 'Mira 11' }, { id: 2, value: 'Gafuri 52' }];\r\n\r\napp.use(express.json()); // Для обработки JSON данных\r\n\r\napp.get('/products', (req: Request, res: Response) => {\r\n  if (req.query.title) {\r\n    let searchString = req.query.title.toString();\r\n    res.send(products.filter(p => p.title.indexOf(searchString) > -1))\r\n  } else {\r\n    res.send(products)\r\n  }\r\n})\r\n\r\napp.post('/products', (req: Request, res: Response) => {\r\n  const newProduct = {\r\n    id: Math.floor(Math.random() * 100),\r\n    title: req.body.title\r\n  }\r\n  products.push(newProduct)\r\n  res.status(201).send(newProduct)\r\n});\r\n\r\napp.get('/products/:id', (req: Request, res: Response) => {\r\n  let product = products.find(p => p.id === +req.params.id)\r\n  if (product) {\r\n    res.send(product)\r\n  } else {\r\n    res.sendStatus(404)\r\n  }\r\n});\r\n\r\napp.put('/products/:id', (req: Request, res: Response) => {\r\n  let product = products.find(p => p.id === +req.params.id)\r\n  if (product) {\r\n    product.title = req.body.title\r\n    res.send(product)\r\n  } else {\r\n    res.sendStatus(404)\r\n  }\r\n});\r\n\r\napp.delete('/products/:id', (req: Request, res: Response) => {\r\n  for (let i = 0; i < products.length; i++) {\r\n    if (products[i].id === +req.params.id) {\r\n      products.splice(i, 1); // Удаляет продукт из массива\r\n      res.sendStatus(204); // Отправляет статус 204 (No Content)\r\n      return; // Завершает выполнение функции\r\n    }\r\n  }\r\n  res.sendStatus(404); // Отправляет статус 404 (Not Found), если продукт не найден\r\n});\r\n\r\napp.get('/addresses', (req: Request, res: Response) => {\r\n  console.log('Received request for /addresses'); // Логируем запрос\r\n  res.json(addresses); // Возвращаем адреса в формате JSON\r\n});\r\napp.get('/addresses/:id', (req: Request, res: Response) => {\r\n  let address = addresses.find(p => p.id === +req.params.id)\r\n  if (address) {\r\n    res.send(address)\r\n  } else {\r\n    res.send(404)\r\n  }\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Example app listening on port ${port}`);\r\n});\r\n\r\n//express 03 27^00\r\n//39:39"]}